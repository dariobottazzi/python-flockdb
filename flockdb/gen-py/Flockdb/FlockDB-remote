#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import FlockDB
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool contains(i64 source_id, i32 graph_id, i64 destination_id)'
  print '  Edge get(i64 source_id, i32 graph_id, i64 destination_id)'
  print '  Metadata get_metadata(i64 source_id, i32 graph_id)'
  print '  bool contains_metadata(i64 source_id, i32 graph_id)'
  print '   select2( queries)'
  print '  string count2( queries)'
  print '   select_edges( queries)'
  print '  void execute(ExecuteOperations operations)'
  print '  i32 count( operations)'
  print '  Results select( operations, Page page)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = FlockDB.Client(protocol)
transport.open()

if cmd == 'contains':
  if len(args) != 3:
    print 'contains requires 3 args'
    sys.exit(1)
  pp.pprint(client.contains(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get':
  if len(args) != 3:
    print 'get requires 3 args'
    sys.exit(1)
  pp.pprint(client.get(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get_metadata':
  if len(args) != 2:
    print 'get_metadata requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_metadata(eval(args[0]),eval(args[1]),))

elif cmd == 'contains_metadata':
  if len(args) != 2:
    print 'contains_metadata requires 2 args'
    sys.exit(1)
  pp.pprint(client.contains_metadata(eval(args[0]),eval(args[1]),))

elif cmd == 'select2':
  if len(args) != 1:
    print 'select2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.select2(eval(args[0]),))

elif cmd == 'count2':
  if len(args) != 1:
    print 'count2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.count2(eval(args[0]),))

elif cmd == 'select_edges':
  if len(args) != 1:
    print 'select_edges requires 1 args'
    sys.exit(1)
  pp.pprint(client.select_edges(eval(args[0]),))

elif cmd == 'execute':
  if len(args) != 1:
    print 'execute requires 1 args'
    sys.exit(1)
  pp.pprint(client.execute(eval(args[0]),))

elif cmd == 'count':
  if len(args) != 1:
    print 'count requires 1 args'
    sys.exit(1)
  pp.pprint(client.count(eval(args[0]),))

elif cmd == 'select':
  if len(args) != 2:
    print 'select requires 2 args'
    sys.exit(1)
  pp.pprint(client.select(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
